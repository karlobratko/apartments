@using Apartments.WebUI.Models
@using Apartments.WebUI.ViewModels
@model ApartmentSearchViewModel

@{
  Page.Title = Apartments.ResourceManager.GetString(name: "search");

  String updateTargetId = "apartmentsContainer";
}

@using (Ajax.BeginForm(actionName: "GetFilteredJson",
                       controllerName: "Apartment",
                       ajaxOptions: new AjaxOptions {
                         HttpMethod = "Get",
                         OnComplete = "insertApartments",
                         UpdateTargetId = updateTargetId,
                         InsertionMode = InsertionMode.Replace,
                       })) {
  <div class="row">
    <div class="col-4">
      <div class="mb-3">
        @Html.Label(expression: "maxAdults",
                    labelText: Apartments.ResourceManager.GetString(name: "label-max-adults"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.TextBox(name: "maxAdults",
                      value: Model.SearchSettings.MaxAdults,
                      htmlAttributes: new { @class = "form-control", type = "number" })
      </div>

      <div class="mb-3">
        @Html.Label(expression: "maxChildren",
                    labelText: Apartments.ResourceManager.GetString(name: "label-max-children"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.TextBox(name: "maxChildren",
                      value: Model.SearchSettings.MaxChildren,
                      htmlAttributes: new { @class = "form-control", type = "number" })
      </div>
    </div>

    <div class="col-4">
      <div class="mb-3">
        @Html.Label(expression: "totalRooms",
                    labelText: Apartments.ResourceManager.GetString(name: "label-total-rooms"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.TextBox(name: "totalRooms",
                      value: Model.SearchSettings.TotalRooms,
                      htmlAttributes: new { @class = "form-control", type = "number" })
      </div>

      <div class="mb-3">
        @Html.Label(expression: "cityName",
                    labelText: Apartments.ResourceManager.GetString(name: "label-city"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.DropDownList(name: "cityName",
                           selectList: Model.Cities
                                            .Select(selector: city => new SelectListItem {
                                              Text = city.Name,
                                              Value = city.Name,
                                              Selected = city.Name == Model.SearchSettings.CityName
                                            }),
                           optionLabel: Apartments.ResourceManager.GetString(name: "option-label-city"),
                           htmlAttributes: new { @class = "form-select" })
      </div>
    </div>

    <div class="col-4">
      <div class="mb-3">
        @Html.Label(expression: "sortBy",
                    labelText: Apartments.ResourceManager.GetString(name: "label-sort-by"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.DropDownList(name: "sortBy",
                           selectList: typeof(ApartmentCardViewModel).GetProperties()
                                                                     .Where(predicate: prop => new String[] { "Name", "Address", "City", "Owner", }.Contains(prop.Name))
                                                                     .Select(selector: prop => new SelectListItem {
                                                                       Text = Apartments.ResourceManager.GetString(name: $"sort-by-{prop.Name.ToLower()}"),
                                                                       Value = prop.Name,
                                                                       Selected = prop.Name == Model.SearchSettings.SortBy
                                                                     }),
                           optionLabel: Apartments.ResourceManager.GetString(name: "option-label-sort-by"),
                           htmlAttributes: new { @class = "form-select" })
      </div>

      <div class="mb-3">
        @Html.Label(expression: "sortDirection",
                    labelText: Apartments.ResourceManager.GetString(name: "label-sort-direction"),
                    htmlAttributes: new { @class = "form-label" })
        @Html.DropDownList(name: "sortDirection",
                           selectList: Enum.GetNames(typeof(SortDirection))
                                           .Select(selector: name => new SelectListItem {
                                             Text = Apartments.ResourceManager.GetString(name: name.ToLower()),
                                             Value = name,
                                             Selected = name == Model.SearchSettings.SortDirection.ToString()
                                           }),
                           htmlAttributes: new { @class = "form-select" })
      </div>

      <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-dark px-3">@Apartments.ResourceManager.GetString(name: "search")</button>
      </div>
    </div>

  </div>
}

<div class="album py-5">
  <div class="container">
    <div id="@updateTargetId" class="row row-cols-2 row-cols-sm-3 row-cols-md-4 g-3">
      @Html.Action(actionName: "GetFiltered",
                   controllerName: "Apartment")
    </div>
  </div>
</div>

@section scripts{
  @Scripts.Render("~/Scripts/jqval")

  <script>
    function toHexString(byteArray) {
      return Array.from(byteArray, function (byte) {
        return ('0' + (byte & 0xFF).toString(16)).slice(-2);
      }).join('')
    }

    function hexToBase64(str) {
      return btoa(String.fromCharCode.apply(null, str.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));
    }

    function insertApartments(data) {
      console.log(data);
      $("#@updateTargetId").empty()
                           .append(data.responseJSON.map(apartment => `<div class="col">
                                                                         <div class="card">
                                                                           <img src="${!(apartment.ImageData === null)
                                                                                         ? `data:${apartment.MimeType};base64,${hexToBase64(toHexString(apartment.ImageData))}`
                                                                                         : "/Content/DefaultItem.jpg"}"
                                                                                alt="${apartment.Name}"
                                                                                class="card-img-top align-self-center"
                                                                                style="width: 150px; z-index: 1">
                                                                           <div class="card-body">
                                                                             <h5 class="card-title mt-2" style="height: 3rem">${apartment.Name}</h5>
                                                                             <hr />
                                                                             <p>${apartment.Address}, ${apartment.City}</p>
                                                                             <a href="${apartment.DetailsUrl}" class="stretched-link"></a>
                                                                           </div>
                                                                         </div>
                                                                       </div>`)
                                                    .join(""));
    }
  </script>
}

